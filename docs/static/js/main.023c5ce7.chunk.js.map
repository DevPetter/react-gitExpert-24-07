{"version":3,"sources":["components/AddCategory.jsx","components/GifItem.jsx","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.jsx","GifExpertApp.jsx","index.jsx"],"names":["AddCategory","_ref","onNewCategory","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","onSubmit","event","preventDefault","trim","length","type","placeholder","value","onChange","_ref2","target","GifItem","title","url","id","className","src","alt","getGifs","asyncToGenerator","_regeneratorRuntime","mark","_callee","category","resp","_yield$resp$json","data","gifs","wrap","_context","prev","next","concat","fetch","sent","json","map","img","images","downsized_medium","abrupt","stop","_x","apply","this","arguments","GifGrid","_useFetchGifs","setImages","_useState3","_useState4","isLoading","setIsLoading","getImages","useFetchGifs_regeneratorRuntime","newImages","useEffect","useFetchGifs","Fragment","image","GifItem_GifItem","assign","key","GifExpertApp","categories","setCategories","AddCategory_AddCategory","newCategory","includes","toConsumableArray","GifGrid_GifGrid","ReactDOM","createRoot","document","getElementById","render","StrictMode","GifExpertApp_GifExpertApp"],"mappings":"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","file":"static/js/main.023c5ce7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\n\r\n\r\nexport const AddCategory = ({ onNewCategory }) => {\r\n\r\n    const [ inputValue, setInputValue ] = useState('');\r\n\r\n    const onInputChange = ({ target }) => {\r\n        setInputValue( target.value );\r\n    }\r\n\r\n    const onSubmit = ( event ) => {\r\n        event.preventDefault();\r\n        if( inputValue.trim().length <= 1) return;\r\n\r\n        // setCategories( categories => [ inputValue, ...categories ]);\r\n        setInputValue('');\r\n        onNewCategory( inputValue.trim() );\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ onSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Buscar gifs\"\r\n                value={ inputValue }\r\n                onChange={ onInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n","import React from \"react\"\r\n\r\nexport const GifItem = ({ title, url, id }) => {\r\n\r\n  return (\r\n    <div className=\"card\">\r\n        <img src={ url } alt={ title } />\r\n        <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n","\r\n\r\nexport const getGifs = async ( category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=Dsj92HCLIySNyEt1taMrqUpj8H0jkFY7&q=${category}&limit=10`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => ({\r\n    id: img.id,\r\n    title: img.title,\r\n    url: img.images.downsized_medium.url,\r\n  }));\r\n\r\n  // console.log(gifs);\r\n  return gifs;\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [images, setImages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const getImages = async () => {\r\n    const newImages = await getGifs(category);\r\n    setImages(newImages);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getImages();\r\n  }, []);\r\n\r\n  return {\r\n    images,\r\n    isLoading,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { GifItem } from './GifItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { images, isLoading } = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            {\r\n                isLoading && ( <h2>Cargando...</h2> )\r\n            }\r\n            \r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( ( image ) => (\r\n                        <GifItem \r\n                            key={ image.id } \r\n                            { ...image }\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { AddCategory, GifGrid } from \"./components\";\r\n// import { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"goku\"]);\r\n\r\n  const onAddCategory = (newCategory) => {\r\n    // console.log(newCategory)\r\n    //La siguiente linea la utilizo para verificar que las busquedas escritas no se repitan, entonces, si la nueva categoria buscada esta incluida en el arreglo, entonces no haga nada\r\n    if (categories.includes(newCategory))return;\r\n    setCategories([newCategory, ...categories]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>GifExpertApp</h1>\r\n\r\n      <AddCategory onNewCategory={(value) => onAddCategory(value)} />\r\n\r\n      {categories.map((category) => (\r\n        <GifGrid key={category} category={category} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport \"./style.css\"\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <GifExpertApp/>\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}